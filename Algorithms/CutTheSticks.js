/*
 * Complete the 'cutTheSticks' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */
function compare(a, b) {
        if (a < b) {
            return -1;
        } else if (a > b) {
            return 1;
        } else {
            return 0;
        }
    }

    function cutTheSticks(arr) {
        //while all are not the same
        let smallest_num=0
        console.log("Array : ",arr)
        
        arr.sort(compare)
        console.log("Sorted : ",arr)
        let sticks_at_each_count=[arr.length]
        while(arr.every(v => v === arr[0])===false)
        // Write your code here
    {
    //     //1,2,3
            // console.log("loop")
            smallest_num=arr[0] 
             //take out the smallest_num/s from the array
            arr = arr.filter((number) => number > smallest_num);
            // console.log("Filter num",arr)
            // // sticks_at_each_count.push(arr.length)
            arr=arr.map((number)=>number-1)
            // console.log("after subtraction of smallest number : ",arr)
            sticks_at_each_count.push(arr.length)
    //     //reduce every element to the smallest number
    //      smallest_num=Math.min(...arr)
            

            //difference with smallest_num with all the number

    // console.log(arr)
    }
    return "this->",sticks_at_each_count
}

console.log(cutTheSticks([950,729,701,310,293,870,956,471,997,515,533,462,456,51,874,117,775,872,732,971,499,94,554,126,741,940,454,857,261,409,148,41,748,757,464,226,270,170,908,934,826,56,438,500,233,262,541,951,204,117,985,235,780,170,631,616,964,188,60,214,928,663,956,503,596,185,494,113,621,485,851,707,581,884,522,551,251,843,938,452,830,947,266,182,278,548,96,245,182,645,570,435,952,142,773,940,812,294,995,964,435,568,365,20,677,70,872,496,935,509,485,23,62,98,942,907,206,420,325,509,851,856,523,232,981,375,648,470,244,405,73,918,767,128,510,170,897,260,118,313,907,350,917,350,175,293,763,334,937,544,463,339,203,826,754,150,258,787,813,924,736,305,105,112,133,4,574,846,929,141,581,111,946,722,315,536,771,293,586,502,747,427,502,125,993,992,551,414,456,544,782,385,426,743,163,67,912,6,657,136,416,957,63,359,29,174,703,811,856,736,486,157,702,117,164,670,267,993,103,979,79,947,852,887,124,279,17,946,80,608,431,293,77,775,53,660,108,401,412,544,645,767,391,557,297,650,458,802,207,87,243,635,790,609,574,430,154,230,874,183,373,234,362,263,623,266,251,8,427,560,885,871,683,830,220,369,984,594,964,708,437,78,397,791,51,935,716,506,43,855,4,502,157,667,734,936,873,204,638,733,150,264,340,781,437,417,27,594,411,155,650,948,748,452,456,175,478,606,688,162,73,825,2,177,643,768,627,760,183,512,473,927,516,723,517,619,33,468,364,933,340,208,920,856,661,318,178,292,775,877,348,675,841,778,921,92,49,92,723,211,243,876,852,766,201,156,245,200,835,176,539,249,853,628,335,287,739,860,485,992,856,789,664,896,527,842,361,794,588,222,834,662,605,521,764,201,434,647,18,711,95,335,800,262,110,711,748,819,692,245,606,717,698,459,449,758,69,826,508,596,365,210,48,74,640,751,680,691,241,165,779,283,581,451,272,719,318,636,515,894,727,621,120,604,74,958,191,224,414,276,486,250,444,703,644,926,49,319,607,459,166,179,461,717,212,329,987,805,582,618,703,218,996,975,44,23,770,722,446,852,954,233,937,737,136,494,807,911,364,214,998,153,642,375,759,420,346,409,593,28,232,739,56,624,895,629,560,994,679,672,988,579,7,644,213,632,780,388,910,343,436,301,131,838,658,485,24,287,792,464,656,931,172,876,819,557,892,317,870,497,445,19,793,759,862,113,844,770,515,212,552,502,688,375,692,816,729,42,273,649,981,108,60,699,614,71,521,54,647,457,318,179,907,250,775,409,217,214,381,938,521,194,745,340,291,506,473,979,300,801,511,106,789,771,316,527,814,480,380,898,11,163,500,584,681,381,626,829,57,69,512,804,377,671,96,653,27,209,705,787,229,230,782,13,544,357,419,796,624,139,65,530,527,206,230,616,551,172,239,151,692,324,190,469,45,458,288,846,26,878,334,2,17,500,319,361,677,12,638,285,39,573,308,630,387,577,411,389,688,261,780,818,102,980,586,62,950,217,405,934,561,574,32,142,41,943,530,653,223,434,469,626,196,597,662,304,581,876,486,502,442,406,871,880,777,959,692,429,4,743,875,904,286,347,897,108,674,294,863,766,66,955,544,593,440,772,328,702,364,587,431,233,308,849,450,575,769,675,698,899,385,218,656,51,908,641,939,993,755,363,871,491,521,860,847,204,406,207,934,185,687,92,869,239,932,314,275,571,226,300,100,366,403,923,41,12,158,563,117,773,765,397,49,835,369,841,545,634,699,151,330,279,458,956,521,829,536,778,695,936,161,335,593,803,116,66,922,448,954,156,322,193,386,429,328,283,611,388,919,593,672,428,574,472,408,804,634,385,391,836,497,367,72,442,833,791,551,800,284,463,660,716,305,105,38,16,466,40,512,33,678,650,42,951,670,755,322,736,742,160,978,908,641,85,187,809,841,206,411,118,410,993,806,70,864,155]))